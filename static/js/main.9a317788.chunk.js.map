{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBotton","className","type","name","Recipes","recipes","map","recipe","key","title","marginBottom","src","image_url","alt","length","concat","substring","publisher","react_router_dom","to","pathname","recipe_id","state","API_KEY","App","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","_this","setState","console","log","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","this","components_Recipes","Component","Recipe","activeRecipe","req","res","location","href","publisher_url","React","Router","react_router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a317788.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = (props) => {\n  return(\n    <form onSubmit={props.getRecipe} style={{ marginBotton: \"2rem\" }}>\n      <input className=\"form__input\" type=\"text\" name=\"recipeName\"/>\n      <button className=\"form__button\">Search</button>\n    </form>\n  );\n\n}\n\nexport default Form;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Recipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n    { props.recipes.map((recipe) => {\n      return (\n        <div key={recipe.title} className=\"col-md-4\" style={{ marginBottom:\"2rem\"}}>\n          <div className=\"recipes__box\">\n            <img className=\"recipe__box-img\"\n            src={recipe.image_url}\n            alt={recipe.title} />\n            <div className=\"recipe__text\">\n              <h5 className=\"recipes__title\">\n              { recipe.title.length < 20 ? `${recipe.title}` : `${recipe.title.substring(0,25)}...` }</h5>\n              <p className=\"recipe__subtitle\">Publisher: <span>\n                { recipe.publisher}\n              </span></p>\n            </div>\n            <button className=\"recipe_buttons\">\n            <Link to={{\n              pathname: `/recipe/${recipe.recipe_id}`,\n              state: { recipe: recipe.title }\n              }}>View Recipe</Link>\n              </button>\n          </div>\n        </div>\n      );\n    })}\n    </div>\n  </div>\n\n);\n\nexport default Recipes;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst API_KEY = \"584295bfc64a02b6b55ba68b13218c1d\";\n// const URL = \"https://www.food2fork.com/api/get?key=YOUR_API_KEY&rId=35382\";\n\nclass App extends Component {\n  state = {\n    recipes: []\n  }\n\n  getRecipe = async (e) => {\n    e.preventDefault();\n    const recipeName = e.target.elements.recipeName.value;\n\n    // const api_call = await fetch(`https://www.food2fork.com/api/get?key=${API_KEY}&rId=35382`);\n    const api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=10`);\n    // console.log(recipeName);\n    const data = await api_call.json();\n    // console.log(data.recipes[4].recipe_id);\n    // this.setState({ recipes: data });\n    this.setState({ recipes: data.recipes });\n    console.log(this.state.recipes);\n  }\n  componentDidMount = () => {\n      const json = localStorage.getItem(\"recipes\");\n      const recipes = JSON.parse(json) || []; // default to empty array\n      this.setState({ recipes });\n    }\n    componentDidUpdate = () => {\n      const recipes = JSON.stringify(this.state.recipes);\n      localStorage.setItem(\"recipes\", recipes);\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Find Recipes Around the World!</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst API_KEY = \"584295bfc64a02b6b55ba68b13218c1d\";\n\nclass Recipe extends React.Component {\n  state = {\n    activeRecipe: []\n  }\n\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(`https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${API_KEY}&q=${title}`);\n    const res = await req.json();\n    // console.log(res.recipes[0]);\n    this.setState({ activeRecipe: res.recipes[0] });\n    console.log(this.setState.activeRecipe);\n  }\n\n\n  render(){\n    // console.log(this.props);\n    const recipe = this.state.activeRecipe;\n    return(\n        <div className=\"container\">\n          {this.state.activeRecipe.length !== 0 &&\n            <div className=\"active-recipe\">\n              <img className=\"active-recipe__img\" src={recipe.image_url} alt={recipe.title}/>\n              <h3 className=\"active-recipe__title\">{recipe.title}</h3>\n              <h4 className=\"active-recipe__publisher\">\n              Publisher: <span>{recipe.publisher}</span></h4>\n              <p className=\"active-recipe__website\">Website:\n              <span><a href={recipe.publisher_url} />{recipe.publisher_url}</span></p>\n              <button className=\"active-recipe__button\">\n                <Link to=\"/\">Go Home</Link>\n              </button>\n            </div>\n          }\n        </div>\n    );\n  }\n};\n\nexport default Recipe;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport App from \"../App\";\nimport Recipe from \"./Recipe\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/recipe/:id\" component={Recipe} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}